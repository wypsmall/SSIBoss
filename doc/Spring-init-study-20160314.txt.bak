【ClassPathXmlApplicationContext】
【1】
	public ClassPathXmlApplicationContext(String configLocation) throws BeansException {
		this(new String[] {configLocation}, true, null);
	}
【2】	
	public ClassPathXmlApplicationContext(String[] configLocations, boolean refresh, ApplicationContext parent)
			throws BeansException {

		super(parent);
		setConfigLocations(configLocations);
		if (refresh) {
			refresh();
		}
	}

【AbstractApplicationContext】
【3】
	public void refresh() throws BeansException, IllegalStateException {
		synchronized (this.startupShutdownMonitor) {
			// Prepare this context for refreshing.
			prepareRefresh();

			// Tell the subclass to refresh the internal bean factory.
			ConfigurableListableBeanFactory beanFactory = obtainFreshBeanFactory();

			// Prepare the bean factory for use in this context.
			prepareBeanFactory(beanFactory);

			try {
				// Allows post-processing of the bean factory in context subclasses.
				postProcessBeanFactory(beanFactory);

				// Invoke factory processors registered as beans in the context.
				invokeBeanFactoryPostProcessors(beanFactory);

				// Register bean processors that intercept bean creation.
				registerBeanPostProcessors(beanFactory);

				// Initialize message source for this context.
				initMessageSource();

				// Initialize event multicaster for this context.
				initApplicationEventMulticaster();

				// Initialize other special beans in specific context subclasses.
				onRefresh();

				// Check for listener beans and register them.
				registerListeners();

				// Instantiate all remaining (non-lazy-init) singletons.
				finishBeanFactoryInitialization(beanFactory);

				// Last step: publish corresponding event.
				finishRefresh();
			}

			catch (BeansException ex) {
				// Destroy already created singletons to avoid dangling resources.
				destroyBeans();

				// Reset 'active' flag.
				cancelRefresh(ex);

				// Propagate exception to caller.
				throw ex;
			}
		}
	}
	
	

【】
AbstractXmlApplicationContext.loadBeanDefinitions(DefaultListableBeanFactory)  (org.springframework.context.support)
	protected void loadBeanDefinitions(DefaultListableBeanFactory beanFactory) throws BeansException, IOException {
		// Create a new XmlBeanDefinitionReader for the given BeanFactory.
		XmlBeanDefinitionReader beanDefinitionReader = new XmlBeanDefinitionReader(beanFactory);
AbstractRefreshableApplicationContext.refreshBeanFactory()  (org.springframework.context.support)
AbstractApplicationContext.obtainFreshBeanFactory()  (org.springframework.context.support)


【】
D:\Code\.m2\repository\org\springframework\spring-context\3.1.2.RELEASE\spring-context-3.1.2.RELEASE.jar!
\org\springframework\context\support\AbstractXmlApplicationContext.class

	protected void loadBeanDefinitions(DefaultListableBeanFactory beanFactory) throws BeansException, IOException {
		// Create a new XmlBeanDefinitionReader for the given BeanFactory.
		XmlBeanDefinitionReader beanDefinitionReader = new XmlBeanDefinitionReader(beanFactory);


【】
D:\Code\.m2\repository\org\springframework\spring-context\3.1.2.RELEASE\spring-context-3.1.2.RELEASE.jar!
\org\springframework\context\annotation\AnnotationConfigUtils.class

	public static final String AUTOWIRED_ANNOTATION_PROCESSOR_BEAN_NAME =
			"org.springframework.context.annotation.internalAutowiredAnnotationProcessor";
			
【通过调试跟代码-20160314】
18:26:45.207 [main] DEBUG o.s.b.f.xml.XmlBeanDefinitionReader - Loaded 7 bean definitions from location pattern [classpath*:spring/test-orderAppCtx-noMock.xml]
=============================================================================================
【XmlBeanDefinitionReader】
	public XmlBeanDefinitionReader(BeanDefinitionRegistry registry) {
		super(registry);
	}
【AbstractBeanDefinitionReader】
	public int loadBeanDefinitions(String location, Set<Resource> actualResources) throws BeanDefinitionStoreException {
=============================================================================================
18:26:45.207 [main] DEBUG o.s.c.s.ClassPathXmlApplicationContext - Bean factory for org.springframework.context.support.ClassPathXmlApplicationContext@70984b95: org.springframework.beans.factory.support.DefaultListableBeanFactory@a6d006c: defining beans [sessionTemplate,sqlSessionFactory,transactionManager,org.springframework.aop.config.internalAutoProxyCreator,org.springframework.transaction.annotation.AnnotationTransactionAttributeSource#0,org.springframework.transaction.interceptor.TransactionInterceptor#0,org.springframework.transaction.config.internalTransactionAdvisor,dataSource,org.springframework.beans.factory.config.PropertyPlaceholderConfigurer#0,orderOpDao,org.springframework.context.annotation.internalConfigurationAnnotationProcessor,org.springframework.context.annotation.internalAutowiredAnnotationProcessor,org.springframework.context.annotation.internalRequiredAnnotationProcessor,org.springframework.context.annotation.internalCommonAnnotationProcessor,mockOrderOpService]; root of factory hierarchy
=============================================================================================
【AbstractApplicationContext】
	protected ConfigurableListableBeanFactory obtainFreshBeanFactory() {
		refreshBeanFactory();
		ConfigurableListableBeanFactory beanFactory = getBeanFactory();
		if (logger.isDebugEnabled()) {
			logger.debug("Bean factory for " + getDisplayName() + ": " + beanFactory);
		}
		return beanFactory;
	}
=============================================================================================
【】
 this.namespaceHandlerResolver

handlerMappings = {ConcurrentHashMap@1669}  size = 13
 0 = {ConcurrentHashMap$WriteThroughEntry@1688} "http://www.springframework.org/schema/jdbc" -> "org.springframework.jdbc.config.JdbcNamespaceHandler"
 1 = {ConcurrentHashMap$WriteThroughEntry@1689} "http://www.alibaba.com/schema/stat" -> "com.alibaba.druid.support.spring.stat.config.DruidStatNamespaceHandler"
 2 = {ConcurrentHashMap$WriteThroughEntry@1690} "http://www.springframework.org/schema/c" -> "org.springframework.beans.factory.xml.SimpleConstructorNamespaceHandler"
 3 = {ConcurrentHashMap$WriteThroughEntry@1691} "http://www.springframework.org/schema/aop" -> "org.springframework.aop.config.AopNamespaceHandler"
 4 = {ConcurrentHashMap$WriteThroughEntry@1692} "http://www.springframework.org/schema/util" -> "org.springframework.beans.factory.xml.UtilNamespaceHandler"
 5 = {ConcurrentHashMap$WriteThroughEntry@1693} "http://www.springframework.org/schema/p" -> "org.springframework.beans.factory.xml.SimplePropertyNamespaceHandler"
 6 = {ConcurrentHashMap$WriteThroughEntry@1694} "http://www.springframework.org/schema/tx" -> "org.springframework.transaction.config.TxNamespaceHandler"
 7 = {ConcurrentHashMap$WriteThroughEntry@1695} "http://www.springframework.org/schema/cache" -> "org.springframework.cache.config.CacheNamespaceHandler"
 8 = {ConcurrentHashMap$WriteThroughEntry@1696} "http://www.springframework.org/schema/lang" -> "org.springframework.scripting.config.LangNamespaceHandler"
 9 = {ConcurrentHashMap$WriteThroughEntry@1697} "http://www.springframework.org/schema/task" -> "org.springframework.scheduling.config.TaskNamespaceHandler"
 10 = {ConcurrentHashMap$WriteThroughEntry@1698} "http://www.springframework.org/schema/context" -> "org.springframework.context.config.ContextNamespaceHandler"
 11 = {ConcurrentHashMap$WriteThroughEntry@1699} "http://www.mockito.org/spring/mockito" -> "org.kubek2k.springockito.xml.MockitoNamespaceHandler"
 12 = {ConcurrentHashMap$WriteThroughEntry@1700} "http://www.springframework.org/schema/jee" -> "org.springframework.ejb.config.JeeNamespaceHandler"
 



18:26:45.272 [main] DEBUG o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'org.springframework.context.annotation.internalConfigurationAnnotationProcessor'
